#+TITLE: Day3
#+PROPERTY: header-args:clojure :session day3 :tangle ../src/day3.clj :results silent :comments org

* Initial ns declaration
#+begin_src clojure
(ns day3
  (:require [clojure.string :as str]
            [clojure.java.io :as io]))
#+end_src

* Part 1
--- Day 3: Toboggan Trajectory ---
With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.

Due to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:

..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#

These aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:

..##.........##.........##.........##.........##.........##.......  --->
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->
You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).

The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:

From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.

The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:

..##.........##.........##.........##.........##.........##.......  --->
#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........X.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...#X....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->
In this example, traversing the map using this slope would cause you to encounter 7 trees.

Starting at the top-left corner of your map and following a slope of right 3 and down 1, how many trees would you encounter?

* Define the initial input

#+begin_src clojure :tangle off
(def example-input (str/join "\n"
                             ["..##......."
                              "#...#...#.."
                              ".#....#..#."
                              "..#.#...#.#"
                              ".#...##..#."
                              "..#.##....."
                              ".#.#.#....#"
                              ".#........#"
                              "#.##...#..."
                              "#...##....#"
                              ".#..#...#.#"]))
#+end_src

* Define our utility functions

=parse-input= takes a string and returns a matrix (with infinite rows!)
representing the entire map.

=tree?= takes an input map (as returned above) and a point (x, y - origin at the
top left of the map) and returns either =true= (yep, it's a tree), =false=
(nope - not a tree), or =nil= (we're off the map).
#+begin_src clojure
(defn parse-input [s]
  (->> (str/split s #"\n")
       (mapv (fn [line] (cycle (map #(= \# %) line))))))

(defn tree? [input [x y]]
  (nth (nth input y nil) x nil))
#+end_src

* Testing out the parsing functions
#+begin_src clojure :results replace :tangle no
(tree? (parse-input example-input) [15 10])
#+end_src

#+RESULTS:
: true

* Define the function to count trees for a slope

Start with an (infinite) sequence of points on our slope. Find all the trees on
the route (stopping once we're off the map). Count them!
#+begin_src clojure
(defn count-trees-for-slope [input [slope-x slope-y]]
  (->>
   (iterate (fn [[x y]]
              [(+ x slope-x) (+ y slope-y)])
            [0 0])
   (map (partial tree? input))
   (take-while #(not= nil %))
   (filter identity)
   (count)))
#+end_src

* Verify that it works for the example

#+begin_src clojure :results replace :tangle no
(count-trees-for-slope (parse-input example-input) [3 1])
#+end_src

#+RESULTS:
: 7

* Get the answer to Part 1

#+begin_src clojure :results replace :tangle no
(count-trees-for-slope
 (parse-input (slurp (io/resource "day3-input.txt")))
 [3 1])
#+end_src

#+RESULTS:
: 289

* Part 2 Instructions

Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.

Determine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:

- Right 1, down 1.
- Right 3, down 1. (This is the slope you already checked.)
- Right 5, down 1.
- Right 7, down 1.
- Right 1, down 2.
In the above example, these slopes would find 2, 7, 3, 4, and 2 tree(s) respectively; multiplied together, these produce the answer 336.

What do you get if you multiply together the number of trees encountered on each of the listed slopes?

* Verify the example for Part 2
** Define the slopes to check
#+begin_src clojure
(def slopes-to-check [[1 1] [3 1] [5 1] [7 1] [1 2]])
#+end_src

#+begin_src clojure :results replace :tangle no
(let [input (parse-input example-input)]
  (->> slopes-to-check
       (map (partial count-trees-for-slope input))
       (reduce *)))
#+end_src

#+RESULTS:
: 336

* Get the answer for Part 2
#+begin_src clojure :results replace :tangle no
(let [input (parse-input (slurp (io/resource "day3-input.txt")))]
  (->> slopes-to-check
       (map (partial count-trees-for-slope input))
       (reduce *)))
#+end_src

#+RESULTS:
: 5522401584
